dataframe <- read.csv('tecator.csv')
View(dataframe)
# Clear global env.
rm(list = ls())
data <- read.csv('tecator.csv', header=TRUE)
set.seed(12345)
n = dim(data)[1]
id = sample(1:n, floor(n * 0.5)) # Take a random sample
train_data = data[id, ]
test_data = data[-id, ]
View(data)
fatData <- data[,-102]
View(fatData)
fatData <- data[,-102]
fatData <- fatData[,-102]
# Clear global env.
rm(list = ls())
# Clear global env.
rm(list = ls())
data <- read.csv('tecator.csv', header=TRUE)
set.seed(12345)
fatData <- data[,-103:104]
fatData <- data[,-103]
View(fatData)
fatData <- fatData[,-103]
fit = lm(Fat ~ . ,data = train_data)
data <- read.csv('tecator.csv', header=TRUE)
set.seed(12345)
# Remove Protein and moisture in new dataset
fatData <- data[,-103]
fatData <- fatData[,-103]
n = dim(fatData)[1]
id = sample(1:n, floor(n * 0.5)) # Take a random sample
train_data = fatData[id, ]
test_data = fatData[-id, ]
fit = lm(Fat ~ . ,data = train_data)
summary(fit)
# Predictions
prediction_train = predict(fit, train_data)
prediction_test = predict(fit, test_data)
# Fat
Fat <- dataframe$Fat
# Fat
Fat <- data$Fat
# Fat
fat <- data$Fat
# Clear global env.
rm(list = ls())
data <- read.csv('tecator.csv', header=TRUE)
set.seed(12345)
# Fat
fat <- data$Fat
# Remove Protein and moisture in new dataset
fatData <- data[,-103]
fatData <- fatData[,-103]
n = dim(fatData)[1]
id = sample(1:n, floor(n * 0.5)) # Take a random sample
train_data = fatData[id, ]
test_data = fatData[-id, ]
fit = lm(Fat ~ . ,data = train_data)
summary(fit)
# Predictions
prediction_train = predict(fit, train_data)
prediction_test = predict(fit, test_data)
confusion_matrix <- table(prediction_train, Fat)
confusion_matrix <- table(prediction_train, fat)
View(data)
# Clear global env.
rm(list = ls())
# Clear global env.
rm(list = ls())
data <- read.csv('tecator.csv', header=TRUE)
set.seed(12345)
# Fat
fat <- data$Fat
# Remove Protein and moisture in new dataset
selected_columns <- names(fatData)[1:100]
# Remove Protein and moisture in new dataset
selected_columns <- names(data)[1:100]
# Creating a new dataframe with only the selected columns
fatData_subset <- data[, c(selected_columns, "Fat")]
View(fatData_subset)
# Remove Protein and moisture in new dataset
selected_columns <- names(data)[1:101]
# Creating a new dataframe with only the selected columns
fatData_subset <- data[, c(selected_columns, "Fat")]
View(fatData_subset)
n = dim(fatData_subset)[1]
id = sample(1:n, floor(n * 0.5)) # Take a random sample
train_data = fatData_subset[id, ]
test_data = fatData_subset[-id, ]
fit = lm(Fat ~ . ,data = train_data)
summary(fit)
# Predictions
prediction_train = predict(fit, train_data)
prediction_test = predict(fit, test_data)
confusion_matrix <- table(prediction_train, fat)
print(confusion_matrix)
summary(fit)
# Clear global env.
rm(list = ls())
data <- read.csv('tecator.csv', header=TRUE)
set.seed(12345)
# Fat
fat <- data$Fat
# Remove protein, moisture and sample in new dataset
selected_columns <- names(data)[1:101]
# Remove protein, moisture and sample in new dataset
selected_columns <- names(data)[2:101]
# Creating a new dataframe with only the selected columns
fatData_subset <- data[, c(selected_columns, "Fat")]
View(fatData_subset)
n = dim(fatData_subset)[1]
id = sample(1:n, floor(n * 0.5)) # Take a random sample
train_data = fatData_subset[id, ]
test_data = fatData_subset[-id, ]
fit = lm(Fat ~ . ,data = train_data)
summary(fit)
# Predictions
prediction_train = predict(fit, train_data)
prediction_test = predict(fit, test_data)
confusion_matrix <- table(prediction_train, fat)
print(confusion_matrix)
prediction_test = predict(fit, test_data)
# Calculating errors, Mean Squared Error
mse_train = mean((train_data$Fat - prediction_train)^2)
mse_test = mean((test_data$Fat - prediction_test)^2)
print(paste("Training MSE: ", mse_train))
print(paste("Test MSE: ", mse_test))
# Clear global env.
rm(list = ls())
data <- read.csv('tecator.csv', header=TRUE)
set.seed(12345)
# Fat
fat <- data$Fat
# Remove protein, moisture and sample in new dataset
selected_columns <- names(data)[2:101]
# Creating a new dataframe with only the selected columns
fatData_subset <- data[, c(selected_columns, "Fat")]
n = dim(fatData_subset)[1]
id = sample(1:n, floor(n * 0.5)) # Take a random sample
train_data = fatData_subset[id, ]
test_data = fatData_subset[-id, ]
fit = lm(Fat ~ . ,data = train_data)
summary(fit)
# Predictions
prediction_train = predict(fit, train_data)
prediction_test = predict(fit, test_data)
# Calculating errors, Mean Squared Error
mse_train = mean((train_data$Fat - prediction_train)^2)
mse_test = mean((test_data$Fat - prediction_test)^2)
print(paste("Training MSE: ", mse_train))
print(paste("Test MSE: ", mse_test))
fit = lm(Fat ~ . ,data = data)
summary(fit)
# Predictions
prediction_train = predict(fit, train_data)
prediction_test = predict(fit, test_data)
train_data = fatData_subset[id, ]
test_data = fatData_subset[-id, ]
fit = lm(Fat ~ . ,data = data)
summary(fit)
# Predictions
prediction_train = predict(fit, train_data)
prediction_test = predict(fit, test_data)
fit = lm(Fat ~ . ,data = train_data)
summary(fit)
# Predictions
prediction_train = predict(fit, train_data)
prediction_test = predict(fit, test_data)
# Calculating errors, Mean Squared Error
mse_train = mean((train_data$Fat - prediction_train)^2)
mse_test = mean((test_data$Fat - prediction_test)^2)
print(paste("Training MSE: ", mse_train))
print(paste("Test MSE: ", mse_test))
# Clear global env.
rm(list = ls())
### Read data and divide it into test and train ###
data <- read.csv('tecator.csv', header=TRUE)
set.seed(12345)
n <- dim(data)[1]
set.seed(12345)
id <- sample(1:n, floor(n * 0.5))
train <- data[id, ]
test <- data[-id, ]
subset_train <- train %>% select(Fat, Channel1:Channel100)
# Remove protein, moisture and sample in new dataset
selected_columns <- names(data)[2:101]
# Creating a new dataframe with only the selected columns
fatData_subset <- data[, c(selected_columns, "Fat")]
# Creating a new dataframe with only the selected columns
fd_subset <- data[, c(selected_columns, "Fat")]
n = dim(fd_subset)[1]
id = sample(1:n, floor(n * 0.5)) # Take a random sample
n = dim(fd_subset)[1]
id = sample(1:n, floor(n * 0.5)) # Take a random sample
train_data = fd_subset[id, ]
test_data = fd_subset[-id, ]
relevant_cols <- names(data)[2:101]
# Clear global env.
rm(list = ls())
set.seed(12345)
# Clear global env.
rm(list = ls())
### Read data and divide it into test and train ###
set.seed(12345)
data_full <- read.csv('tecator.csv', header=TRUE)
relevant_cols <- names(data_full)[2:101]
data <- data_full[, c(selected_columns, "Fat")]
data <- data_full[, c(relevant_cols, "Fat")]
n = dim(data)[1]
id = sample(1:n, floor(n * 0.5)) # Take a random sample
train_data = data[id, ]
test_data = data[-id, ]
View(data)
# Model
fit = lm(Fat ~ . ,data = train_data)
summary(fit)
# Predictions
prediction_train = predict(fit, train_data)
prediction_test = predict(fit, test_data)
# Calculating errors, Mean Squared Error
mse_train = mean((train_data$Fat - prediction_train)^2)
mse_test = mean((test_data$Fat - prediction_test)^2)
print(paste("Training MSE: ", mse_train)) # 0.00570911701090834
print(paste("Test MSE: ", mse_test)) # 722.429419336971
########### Libraries #############
library(glmnet)
########### Libraries #############
library(glmnet)
########### Libraries #############
library(glmnet)
########### Libraries #############
library(glmnet)
# Fit LASSO regression model
lasso_fit <- cv.glmnet(as.matrix(train_data[, -ncol(train_data)]), train_data$Fat, alpha = 1)
########### Libraries #############
library(glmnet)
########### Libraries #############
library(glmnet)
library(dplyr)
library(caret)
########### Libraries #############
library(glmnet)
install.packages("glmnet")
########### Libraries #############
library(glmnet)
########### Libraries #############
library(glmnet)
install.packages("glmnet", repos = "https://cran.rstudio.com/")
########### Libraries #############
library(glmnet)
remove.packages("glmnet")
install.packages("glmnet", repos = "https://cran.us.r-project.org/")
install.packages("glmnet", repos = "https://cran.us.r-project.org/")
install.packages("glmnet", repos = "https://cran.rstudio.com/", type = "source")
########### Libraries #############
library(glmnet)
########### Libraries #############
library(glmnet)
install.packages("glmnet", repos = "https://cran.rstudio.com/", type = "source")
# Clear global env.
rm(list = ls())
