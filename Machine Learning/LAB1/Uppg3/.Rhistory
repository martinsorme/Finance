abline(a = coef(model)[["(Intercept)"]] / (-coef(model)[["pgc"]]),
b = coef(model)[["age"]] / (-coef(model)[["pgc"]]),
col = "red")
# Add the decision boundary line
abline(a = -model$coefficients[1] / model$coefficients["pgc"],
b = -model$coefficients["age"] / model$coefficients["pgc"],
col = "red")
# Add the decision boundary line
abline(a = -model$coefficients[1] / model$coefficients["pgc"],
b = -model$coefficients["age"] / model$coefficients["pgc"],
col = "red")
# Add the decision boundary line
x_vals <- seq(min(dataframe$age), max(dataframe$age), length.out = 100)
# Add the decision boundary line
x_vals <- seq(min(age), max(age), length.out = 100)
y_vals <- seq(min(pgc), max(pgc), length.out = 100)
contour(x = x_vals, y = y_vals, z = matrix(predict(model, newdata = expand.grid(age = x_vals, pgc = y_vals), type = "response"), ncol = length(y_vals)), levels = 0.5, add = TRUE, col = "red")
contour(x = x_vals, y = y_vals, z = matrix(predict(model, newdata = expand.grid(age = x_vals, pgc = y_vals), type = "response"), ncol = length(y_vals)), levels = 0.5, add = TRUE, col = "red")
# Create an expanded grid with basis functions
new_data <- expand.grid(age = x_vals, pgc = y_vals)
new_data$z1 <- new_data$pgc^4
new_data$z2 <- new_data$pgc^3 * new_data$age
new_data$z3 <- new_data$pgc^2 * new_data$age^2
new_data$z4 <- new_data$pgc * new_data$age^3
new_data$z5 <- new_data$age^4
# Add the decision boundary
contour(x = x_vals, y = y_vals, z = matrix(predict(model, newdata = new_data, type = "response"), ncol = length(y_vals)), levels = 0.5, add = TRUE, col = "red")
# Add the decision boundary
contour(x = x_vals, y = y_vals, z = matrix(predict(model, newdata = new_data, type = "response"), ncol = length(y_vals)), levels = 0.5, add = TRUE, col = "red")
plot(age, pgc, col = color_values[as.factor(prediction_basis)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Add the decision boundary line
x_vals <- seq(min(age), max(age), length.out = 100)
y_vals <- seq(min(pgc), max(pgc), length.out = 100)
# Create an expanded grid with basis functions
new_data <- expand.grid(age = x_vals, pgc = y_vals)
new_data$z1 <- new_data$pgc^4
new_data$z2 <- new_data$pgc^3 * new_data$age
new_data$z3 <- new_data$pgc^2 * new_data$age^2
new_data$z4 <- new_data$pgc * new_data$age^3
new_data$z5 <- new_data$age^4
# Add the decision boundary
contour(x = x_vals, y = y_vals, z = matrix(predict(model, newdata = new_data, type = "response"), ncol = length(y_vals)), levels = 0.5, add = TRUE, col = "red")
View(new_data)
View(new_data)
print(cm_basis)
ggplot(dataframe, aes(x = age, y = pgc, color = as.factor(prediction_1))) + geom_point() +
scale_color_manual(values = c("black", "blue")) +
geom_abline(slope = coef(logistic_model)[["age"]]
/ (-coef(logistic_model)[["pgc"]]),
intercept = coef(logistic_model)[["(Intercept)"]]
/ (-coef(logistic_model)[["pgc"]]), color = "red") +
labs(x = "Age", y = "Plasma Glucose Concentration", color = "Predicted Diabetes")
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "red")
ggplot(dataframe, aes(x = age, y = pgc, color = as.factor(prediction_1))) + geom_point() +
scale_color_manual(values = c("black", "blue")) +
geom_abline(slope = coef(logistic_model)[["age"]]
/ (-coef(logistic_model)[["pgc"]]),
intercept = coef(logistic_model)[["(Intercept)"]]
/ (-coef(logistic_model)[["pgc"]]), color = "red") +
labs(x = "Age", y = "Plasma Glucose Concentration", color = "Predicted Diabetes")
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "red")
model <- glm(y ~ pgc + age + z1 + z2 + z3 + z4 + z5, data = dataframe, family = "binomial")
summary(model)
prediction_basis <- predict(model, dataframe, type = "response")
prediction_basis <- ifelse(prediction_basis > 0.5, 1, 0)
# Confusion Matrix and misclassification rate
cm_basis <- table(prediction_basis, y)
print(cm_basis)
misclass_basis <- (1 - sum(diag(cm_basis)) / length(prediction_basis))
print(paste("Misclassification error of new model:", misclass_basis))
plot(age, pgc, col = color_values[as.factor(prediction_basis)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Add the decision boundary
contour(x = x_vals, y = y_vals, z = matrix(predict(model, newdata = new_data, type = "response"), ncol = length(y_vals)), levels = 0.5, add = TRUE, col = "red")
View(dataframe)
# Plot
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "red")
# Plot
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "red")
v1 <- dataframe$V1
v1 <- dataframe$V1#################################### TASK 1 ####################################
##test
v1 <- dataframe$V1
v2 <- dataframe$V2
v3 <- dataframe$V3
v4 <- dataframe$V4
v5 <- dataframe$V5
v6 <- dataframe$V6
v7 <- dataframe$V7
v8 <- dataframe$V8
res <- dataframe$V9
ad_model = glm(res ~ v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8, data = dataframe, family = "binomial")
summary(ad_model)
prediction_ad <- predict(ad_model, dataframe, type = "response")
#r = 0.5
prediction_ad <- ifelse(prediction_ad > 0.5, 1, 0)
# Confusion matrix
confusion_matrix_ad <- table(prediction_ad, res)
print(confusion_matrix_ad)
misclass_ad <- (1 - sum(diag(confusion_matrix_ad)) / length(prediction_ad))
print(paste("Misclassification error:", misclass_ad))
dataframe <- read.csv('pima-indians-diabetes.csv', header = FALSE)
color_values <- c("black", "blue")
#pgc: Plasma glucose concentration
pgc <- dataframe$V2
age <- dataframe$V8
diabetes <- dataframe$V9
plot(age, pgc, col = ifelse(diabetes == 1, "red", "darkblue"),
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatterplot of Plasma Glucose on Age")
#Legend
legend("topright", legend = c("No Diabetes", "Diabetes"),
col = c("darkblue", "red"), pch = 1)
logistic_model <- glm(diabetes ~ pgc + age, data = dataframe, family = "binomial")
summary(logistic_model)
prediction <- predict(logistic_model, dataframe, type = "response")
#r = 0.5
prediction1 <- ifelse(prediction > 0.5, 1, 0)
# Confusion matrix
confusion_matrix <- table(prediction_1, diabetes)
print(confusion_matrix)
# Confusion matrix
confusion_matrix <- table(prediction_1, diabetes)
#r = 0.5
prediction1 <- ifelse(prediction > 0.5, 1, 0)
# Confusion matrix
confusion_matrix <- table(prediction_1, diabetes)
#r = 0.5
prediction1 <- ifelse(prediction > 0.5, 1, 0)
# Confusion matrix
confusion_matrix <- table(prediction1, diabetes)
print(confusion_matrix)
#Missclassification
misclass <- (1 - sum(diag(confusion_matrix)) / length(prediction_1))
#Missclassification
misclass <- (1 - sum(diag(confusion_matrix)) / length(prediction1))
print(paste("Misclassification error:", misclass)) #0.2630208
# Define color values
color_values <- c("black", "blue")
plot(age, pgc, col = color_values[as.factor(prediction_1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Legend
legend("topright", legend = c("Predicted diabetes: 1", "Predicted diabetes: 0"),
col = c("blue", "black"), pch = 1)
# Plot
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "red")
#Prediction threshold r=0.2
prediction_2 <- ifelse(prediction > 0.2, 1, 0)
#Prediction threshold r=0.8
prediction_3 <- ifelse(prediction > 0.8, 1, 0)
#r=0.2
plot(age, pgc, col = color_values[as.factor(prediction_2)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
legend("topright", legend = c("Predicted diabetes: 1", "Predicted diabetes: 0"),
col = c("blue", "black"), pch = 1)
#Missclassification for r=0.2
confusion_matrix2 <- table(prediction_2, diabetes)
print(confusion_matrix2)
misclass2 <- (1 - sum(diag(confusion_matrix2)) / length(prediction_2))
print(paste("Misclassification error:", misclass2)) #0.37239583
#r=0.8
plot(age, pgc, col = color_values[as.factor(prediction_3)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
legend("topright", legend = c("Predicted diabetes: 1", "Predicted diabetes: 0"),
col = c("blue", "black"), pch = 1)
#Misclassification for r=0.8
confusion_matrix3 <- table(prediction_3, diabetes)
print(confusion_matrix3)
## Comment: Frequent missed prediction of diabetes
misclass3 <- (1 - sum(diag(confusion_matrix3)) / length(prediction_3))
print(paste("Misclassification error:", misclass3)) #0.31510416
dataframe$z1 <- pgc^4
dataframe$z2 <- pgc^3 * age
dataframe$z3 <- pgc^2 * age^2
dataframe$z4 <- pgc * age^3
dataframe$z5 <- age^4
y <- diabetes
model <- glm(y ~ pgc + age + z1 + z2 + z3 + z4 + z5, data = dataframe, family = "binomial")
summary(model)
prediction_basis <- predict(model, dataframe, type = "response")
prediction_basis <- ifelse(prediction_basis > 0.5, 1, 0)
# Confusion Matrix and misclassification rate
cm_basis <- table(prediction_basis, y)
print(cm_basis)
misclass_basis <- (1 - sum(diag(cm_basis)) / length(prediction_basis))
print(paste("Misclassification error of new model:", misclass_basis))
plot(age, pgc, col = color_values[as.factor(prediction_basis)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Add the decision boundary line
x_vals <- seq(min(age), max(age), length.out = 100)
y_vals <- seq(min(pgc), max(pgc), length.out = 100)
# expanded grid with basis functions
new_data <- expand.grid(age = x_vals, pgc = y_vals)
new_data$z1 <- new_data$pgc^4
new_data$z2 <- new_data$pgc^3 * new_data$age
new_data$z3 <- new_data$pgc^2 * new_data$age^2
new_data$z4 <- new_data$pgc * new_data$age^3
new_data$z5 <- new_data$age^4
# Add the decision boundary
contour(x = x_vals, y = y_vals, z = matrix(predict(model, newdata = new_data, type = "response"), ncol = length(y_vals)), levels = 0.5, add = TRUE, col = "red")
print(paste("Misclassification error of new model:", misclass_basis))
plot(age, pgc, col = ifelse(diabetes == 1, "red", "darkblue"),
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatterplot of Plasma Glucose on Age")
#Legend
legend("topright", legend = c("No Diabetes", "Diabetes"),
col = c("darkblue", "red"), pch = 1)
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
plot(age, pgc, col = ifelse(diabetes == 1, "red", "darkblue"),
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatterplot of Plasma Glucose on Age")
# Plot
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "red")
print(confusion_matrix)
plot(age, pgc, col = color_values[as.factor(prediction_basis)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Add the decision boundary
contour(x = x_vals, y = y_vals, z = matrix(predict(model, newdata = new_data, type = "response"), ncol = length(y_vals)), levels = 0.5, add = TRUE, col = "red")
dataframe <- read.csv('pima-indians-diabetes.csv', header = FALSE)
color_values <- c("red", "blue")
set.seed(12345)
# Independent variables
pgc <- dataframe$V2 # Plasma glucose concentration
age <- dataframe$V8
# Dependent variables
diabetes <- dataframe$V9
plot(age, pgc, col = ifelse(diabetes == 1, "red", "darkblue"),
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatterplot of Plasma Glucose on Age")
# Legend
legend("topright", legend = c("No Diabetes", "Diabetes"),
col = c("darkblue", "red"), pch = 1)
logistic_model <- glm(diabetes ~ pgc + age, data = dataframe, family = "binomial")
summary(logistic_model)
prediction <- predict(logistic_model, dataframe, type = "response")
# r = 0.5
prediction1 <- ifelse(prediction > 0.5, 1, 0)
# Confusion matrix
confusion_matrix <- table(prediction1, diabetes)
print(confusion_matrix)
# Missclassification
misclass <- (1 - sum(diag(confusion_matrix)) / length(prediction1))
print(paste("Misclassification error:", misclass)) #0.2630208
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Legend
legend("topright", legend = c("Predicted diabetes: 1", "Predicted diabetes: 0"),
col = c("blue", "black"), pch = 1)
logistic_model <- glm(diabetes ~ pgc + age, data = dataframe, family = "binomial")
summary(logistic_model)
new_data <- data.frame(pgc = seq(50, 250, length.out = 100), age = rep(40, 100))
# Predict probabilities for the positive class (diabetes = 1)
predicted_probabilities <- predict(logistic_model, newdata = new_data, type = "response")
# Create a plot
plot(new_data$pgc, predicted_probabilities, type = "l", col = "blue",
xlab = "pgc", ylab = "P(diabetes = 1)",
main = "Logistic Regression Model")
# Add a line representing the logistic function
lines(new_data$pgc, predicted_probabilities, col = "blue")
# Add points for observed data
points(dataframe$pgc, dataframe$diabetes, col = "red", pch = 16)
# Add a legend
legend("topright", legend = c("Model", "Observed Data"), col = c("blue", "red"), pch = c(1, 16))
dataframe <- read.csv('pima-indians-diabetes.csv', header = FALSE)
color_values <- c("blue", "red")
set.seed(12345)
# Independent variables
pgc <- dataframe$V2 # Plasma glucose concentration
age <- dataframe$V8
# Dependent variables
diabetes <- dataframe$V9
plot(age, pgc, col = ifelse(diabetes == 1, "red", "darkblue"),
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatterplot of Plasma Glucose on Age")
# Legend
legend("topright", legend = c("No Diabetes", "Diabetes"),
col = c("darkblue", "red"), pch = 1)
logistic_model <- glm(diabetes ~ pgc + age, data = dataframe, family = "binomial")
summary(logistic_model)
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
prediction <- predict(logistic_model, dataframe, type = "response")
# r = 0.5
prediction1 <- ifelse(prediction > 0.5, 1, 0)
# Confusion matrix
confusion_matrix <- table(prediction1, diabetes)
print(confusion_matrix)
# Missclassification
misclass <- (1 - sum(diag(confusion_matrix)) / length(prediction1))
print(paste("Misclassification error:", misclass)) #0.2630208
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot")
# Legend
legend("topright", legend = c("Predicted diabetes: 1", "Predicted diabetes: 0"),
col = c("blue", "red"), pch = 1)
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Model classification in Scatter plot")
# Legend
legend("topright", legend = c("Predicted diabetes: 1", "Predicted diabetes: 0"),
col = c("blue", "red"), pch = 1)
# Legend
legend("topright", c("Predicted diabetes: 1", "Predicted diabetes: 0"), col = c("blue", "red"), pch = 1, cex = 0.8)
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Model classification in Scatter plot")
# Legend
legend("topright", c("Predicted diabetes: 1", "Predicted diabetes: 0"), col = c("blue", "red"), pch = 1, cex = 0.8)
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "red")
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "black")
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "green")
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "yellow")
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "purple")
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "blue")
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "black")
# Legend
legend("topright", c("Predicted diabetes: 0", "Predicted diabetes: 1"), col = c("blue", "red"), pch = 1, cex = 0.8)
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Model classification in Scatter plot")
# Legend
legend("topright", c("Predicted diabetes: 0", "Predicted diabetes: 1"), col = c("blue", "red"), pch = 1, cex = 0.8)
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Model classification in Scatter plot")
# Legend
legend("topright", c("Predicted diabetes: 0", "Predicted diabetes: 1"), col = c("blue", "red"), pch = 1, cex = 0.8)
# Legend
legend("topright", c("Predicted diabetes: 0", "Predicted diabetes: 1"), col = c("blue", "red"), pch = 1, cex = 0.5)
plot(age, pgc, col = color_values[as.factor(prediction1)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Model classification in Scatter plot")
# Legend
legend("topright", c("Predicted diabetes: 0", "Predicted diabetes: 1"), col = c("blue", "red"), pch = 1, cex = 0.5)
# Decision boundry line
abline(a = coef(logistic_model)[["(Intercept)"]] / (-coef(logistic_model)[["pgc"]]),
b = coef(logistic_model)[["age"]] / (-coef(logistic_model)[["pgc"]]),
col = "black")
# Prediction threshold r=0.2
prediction_2 <- ifelse(prediction > 0.2, 1, 0)
# Prediction threshold r=0.8
prediction_3 <- ifelse(prediction > 0.8, 1, 0)
# r=0.2
plot(age, pgc, col = color_values[as.factor(prediction_2)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot for r=0.2")
legend("topright", legend = c("Predicted diabetes: 1", "Predicted diabetes: 0"),
col = c("blue", "black"), pch = 1)
# r=0.2
plot(age, pgc, col = color_values[as.factor(prediction_2)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot for r=0.2")
legend("topright", legend = c("Predicted diabetes: 0", "Predicted diabetes: 1"),
col = c("blue", "red"), pch = 1)
# r=0.2
plot(age, pgc, col = color_values[as.factor(prediction_2)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot for r=0.2")
legend("topright", legend = c("Predicted diabetes: 0", "Predicted diabetes: 1"),
col = c("blue", "red"), pch = 1, cex = 0.5)
# r=0.2
plot(age, pgc, col = color_values[as.factor(prediction_2)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot for r=0.2")
legend("topright", legend = c("Predicted diabetes: 0", "Predicted diabetes: 1"),
col = c("blue", "red"), pch = 1, cex = 0.5)
# Missclassification for r=0.2
confusion_matrix2 <- table(prediction_2, diabetes)
print(confusion_matrix2)
misclass2 <- (1 - sum(diag(confusion_matrix2)) / sum(confusion_matrix2))
print(paste("Misclassification error:", misclass2)) #0.37239583
# r=0.8
plot(age, pgc, col = color_values[as.factor(prediction_3)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot for r=0.8")
legend("topright", legend = c("Predicted diabetes: 0", "Predicted diabetes:1"),
col = c("blue", "red"), pch = 1)
# r=0.8
plot(age, pgc, col = color_values[as.factor(prediction_3)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot for r=0.8")
legend("topright", legend = c("Predicted diabetes: 0", "Predicted diabetes:1"),
col = c("blue", "red"), pch = 1, cex=0.5)
# Prediction threshold r=0.2
prediction_2 <- ifelse(prediction > 0.2, 1, 0)
# r=0.2
plot(age, pgc, col = color_values[as.factor(prediction_2)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot for r=0.2")
legend("topright", legend = c("Predicted diabetes: 0", "Predicted diabetes: 1"),
col = c("blue", "red"), pch = 1, cex = 0.5)
# Prediction threshold r=0.8
prediction_3 <- ifelse(prediction > 0.8, 1, 0)
# r=0.8
plot(age, pgc, col = color_values[as.factor(prediction_3)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot for r=0.8")
legend("topright", legend = c("Predicted diabetes: 0", "Predicted diabetes:1"),
col = c("blue", "red"), pch = 1, cex=0.5)
plot(age, pgc, col = color_values[as.factor(prediction_basis)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot on basis model")
dataframe$z1 <- pgc^4
dataframe$z2 <- pgc^3 * age
dataframe$z3 <- pgc^2 * age^2
dataframe$z4 <- pgc * age^3
dataframe$z5 <- age^4
y <- diabetes
model <- glm(y ~ pgc + age + z1 + z2 + z3 + z4 + z5, data = dataframe, family = "binomial")
summary(model)
prediction_basis <- predict(model, dataframe, type = "response")
prediction_basis <- ifelse(prediction_basis > 0.5, 1, 0)
# Confusion Matrix and misclassification rate
cm_basis <- table(prediction_basis, y)
print(cm_basis)
misclass_basis <- (1 - sum(diag(cm_basis)) / sum(cm_basis))
print(paste("Misclassification error of new model:", misclass_basis))
plot(age, pgc, col = color_values[as.factor(prediction_basis)],
xlab = "Age", ylab = "Plasma Glucose Concentration",
main = "Scatter Plot on basis model")
legend("topright", legend = c("Predicted diabetes: 0", "Predicted diabetes:1"),
col = c("blue", "red"), pch = 1, cex=0.5)
print(paste("Misclassification error of new model:", misclass_basis))
# Add the decision boundary line
x_vals <- seq(min(age), max(age), length.out = 100)
y_vals <- seq(min(pgc), max(pgc), length.out = 100)
# Expanded grid with basis functions
new_data <- expand.grid(age = x_vals, pgc = y_vals)
new_data$z1 <- new_data$pgc^4
new_data$z2 <- new_data$pgc^3 * new_data$age
new_data$z3 <- new_data$pgc^2 * new_data$age^2
new_data$z4 <- new_data$pgc * new_data$age^3
new_data$z5 <- new_data$age^4
# Add the decision boundary
contour(x = x_vals, y = y_vals, z = matrix(predict(model, newdata = new_data, type = "response"), ncol = length(y_vals)), levels = 0.5, add = TRUE, col = "red")
# Add the decision boundary
contour(x = x_vals, y = y_vals, z = matrix(predict(model, newdata = new_data, type = "response"), ncol = length(y_vals)), levels = 0.5, add = TRUE, col = "black")
dataframe <- read.csv("tecator.csv")
dataframe <- read.csv('tecator.csv')
